package main

//Farhadul Islam CSE-56 IIUC

import "fmt"

const cn int = 10000 // cannot change

var val int = 200 // right global or public or can be changed

//val:=100 //wrong

func main() {
	variable()
	extra()
}
func variable() {
	var s string = "Hello" // s:="hello"

	var ok bool = true

	var a int = 2 // int32,int64

	fmt.Printf("%T", s) //type

	var x uint = 256 // also many kinds

	var z bool // init false,0,empty str

	fmt.Print(s, ok, a, x, z, "\n")

}

// extra part

// Generated by chatgpt

func extra() {

	/*1. Declaration and Initialization

	  Variables are declared using the var keyword.

	  Syntax:

	*/

	// var variableName typee
	// var variableName typee = value

	//Example:

	var xx int      // declaration without initialization, defaults to zero value
	var yy int = 10 // declaration with initialization
	fmt.Print(xx, yy)

	/*2. Short Variable Declaration

	  You can use := to declare and initialize a variable in one step inside a function.

	  Syntax:
	*/
	value := 0
	variableName := value
	fmt.Print(variableName)

	//Example:

	aaa := 10
	namee := "GoLang"
	fmt.Print(aaa, namee)

	//Note: This cannot be used outside functions (package-level).

	/*

	   3. Zero Value

	   When variables are declared but not initialized, they get the zero value for their type.


	   Examples:

	   	int → 0

	   	float64 → 0.0

	   	string → "" (empty string)

	   	bool → false

	   	Pointers, slices, maps, channels → nil

	*/

	/*

	   4. Multiple Variable Declaration

	   You can declare multiple variables in one line.
	*/

	//Syntax:

	var a, b, c int
	var X, Y, Z = 1, 2, 3
	fmt.Print(a, b, c, X, Y, Z)

	//Example:

	var nameee, ageeee = "Alice", 25
	fmt.Print(nameee, ageeee)

	/*

	   5. Type Inference

	   If you initialize a variable without specifying a type, Go infers the type from the value.*/

	//Example:

	var xX = 10 // x is int
	yY := 3.14  // y is float64
	fmt.Print(xX, yY)

	/*
	   6. Constants vs Variables

	   Constants are declared with const and cannot be changed after declaration.

	   Variables declared with var or := are mutable.

	*/

	//Example:

	const Pi = 3.14
	var radius = 5
	fmt.Print(radius)

	/*7. Variable Scope

	  Variables declared inside functions are local to that function.

	  Variables declared outside functions (at package level) are global within the package.

	  Capitalized names are exported (visible outside the package). */

	/*

	   8. Pointers

	   Variables can store pointers to other variables.
	*/

	//Syntax:

	//var p *int = &x // p stores the address of x

	//You can dereference pointers with *p.

	/*
	   9. Anonymous Variables

	   The blank identifier _ can be used to ignore values.

	*/
	//Example:

	///_, err := someFunction()

	/* 10. Variable Shadowing

	   A variable declared in an inner scope can shadow a variable with the same name in an outer scope.

	*/
	//Example:

	v := 10
	{
		v := 20        // shadows outer x
		fmt.Println(v) // 20
	}
	fmt.Println(v) // 10

	/*
	   11. Type Conversion

	   Variables can be converted from one type to another explicitly.

	*/
	//Syntax:

	var x int = 10
	var yyy float64 = float64(x)
	fmt.Print(yyy)

	/*
	   12. Global vs Local Variables

	   Package-level variables (global within the package) can be accessed from anywhere within the package.

	   Function-level variables (local) exist only within the function scope.

	   13. Default Values

	   If you declare a variable without initialization, it gets the default zero value of the type.

	   14. Using Variables

	   Variables are used to store data and can be passed to functions, modified, etc.

	   15. Exported Variables

	   Variables with names starting with uppercase letters are exported from the package and accessible outside the package.
	*/

}
